// Code generated by MockGen. DO NOT EDIT.
// Source: internal/helper/timestamp_generator.go

// Package mock_helper is a generated GoMock package.
package mock_helper

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockTimestampGeneratorInt is a mock of TimestampGeneratorInt interface.
type MockTimestampGeneratorInt struct {
	ctrl     *gomock.Controller
	recorder *MockTimestampGeneratorIntMockRecorder
}

// MockTimestampGeneratorIntMockRecorder is the mock recorder for MockTimestampGeneratorInt.
type MockTimestampGeneratorIntMockRecorder struct {
	mock *MockTimestampGeneratorInt
}

// NewMockTimestampGeneratorInt creates a new mock instance.
func NewMockTimestampGeneratorInt(ctrl *gomock.Controller) *MockTimestampGeneratorInt {
	mock := &MockTimestampGeneratorInt{ctrl: ctrl}
	mock.recorder = &MockTimestampGeneratorIntMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimestampGeneratorInt) EXPECT() *MockTimestampGeneratorIntMockRecorder {
	return m.recorder
}

// GenerateTimestamps mocks base method.
func (m *MockTimestampGeneratorInt) GenerateTimestamps(period string, startDate, endDate time.Time) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTimestamps", period, startDate, endDate)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTimestamps indicates an expected call of GenerateTimestamps.
func (mr *MockTimestampGeneratorIntMockRecorder) GenerateTimestamps(period, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTimestamps", reflect.TypeOf((*MockTimestampGeneratorInt)(nil).GenerateTimestamps), period, startDate, endDate)
}
