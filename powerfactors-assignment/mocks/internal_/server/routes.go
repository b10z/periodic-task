// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/routes.go

// Package mock_server is a generated GoMock package.
package mock_server

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockListenerInt is a mock of ListenerInt interface.
type MockListenerInt struct {
	ctrl     *gomock.Controller
	recorder *MockListenerIntMockRecorder
}

// MockListenerIntMockRecorder is the mock recorder for MockListenerInt.
type MockListenerIntMockRecorder struct {
	mock *MockListenerInt
}

// NewMockListenerInt creates a new mock instance.
func NewMockListenerInt(ctrl *gomock.Controller) *MockListenerInt {
	mock := &MockListenerInt{ctrl: ctrl}
	mock.recorder = &MockListenerIntMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListenerInt) EXPECT() *MockListenerIntMockRecorder {
	return m.recorder
}

// Route mocks base method.
func (m *MockListenerInt) Route() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Route")
}

// Route indicates an expected call of Route.
func (mr *MockListenerIntMockRecorder) Route() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Route", reflect.TypeOf((*MockListenerInt)(nil).Route))
}

// Start mocks base method.
func (m *MockListenerInt) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockListenerIntMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockListenerInt)(nil).Start))
}
