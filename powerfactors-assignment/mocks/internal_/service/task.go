// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/task.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockTaskServiceInt is a mock of TaskServiceInt interface.
type MockTaskServiceInt struct {
	ctrl     *gomock.Controller
	recorder *MockTaskServiceIntMockRecorder
}

// MockTaskServiceIntMockRecorder is the mock recorder for MockTaskServiceInt.
type MockTaskServiceIntMockRecorder struct {
	mock *MockTaskServiceInt
}

// NewMockTaskServiceInt creates a new mock instance.
func NewMockTaskServiceInt(ctrl *gomock.Controller) *MockTaskServiceInt {
	mock := &MockTaskServiceInt{ctrl: ctrl}
	mock.recorder = &MockTaskServiceIntMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskServiceInt) EXPECT() *MockTaskServiceIntMockRecorder {
	return m.recorder
}

// GenerateTimestampService mocks base method.
func (m *MockTaskServiceInt) GenerateTimestampService(period string, timezone *time.Location, startDate, endDate time.Time) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTimestampService", period, timezone, startDate, endDate)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTimestampService indicates an expected call of GenerateTimestampService.
func (mr *MockTaskServiceIntMockRecorder) GenerateTimestampService(period, timezone, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTimestampService", reflect.TypeOf((*MockTaskServiceInt)(nil).GenerateTimestampService), period, timezone, startDate, endDate)
}
